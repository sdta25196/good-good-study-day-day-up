{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "别进reddit的中文话题，那是最没营养的区域", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "对话式交互也不是所有场景都合适", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "越底层  越难", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "RAG怎么解决prompt", "label": "N"}
{"outlines": "多模态大模型（上）\n1. 多模态大模型的定义\n  1. 跨模态模型\n  2. 单模态大模型\n  3. 多模态模型\n  4. 多模态语言大模型\n2. 图文多模态模型的发展\n  1. Vision Transformer\n  2. 图像文本联合建模\n  3. 大规模图-文 token 对齐模型（CLIP）\n  4. 多模态大语言模型\n    1. OpenAI GPT-4V\n    2. Google Gemini\n3. GPT-4V 实战", "user_input": "谢谢老师", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "gpt怎么知道什么时候调用？", "label": "Y"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "谢谢老师", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "prompting", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "语言逻辑 字面推理", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "早餐制作速度的问题", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "不出境呀，会有头像吗", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "3。5估计不行", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "如果prompt包含两种文本，一种是原始的，一种是处理过的，目的是传入原始得到处理后的，这种场景应该如何保存向量数据库呢", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "其他的本地部署的模型也能实现查询数据库吗", "label": "Y"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "一般\\\n向量数据库的参数权重都是确定的，不是根据数据源灵活调整参数权重的是吗？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "数学还是王", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "老师再见", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "不同的collection是怎么区分的呢？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "学的越多，泛化性越差", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "刚才说现金支付 一下干出公众号了", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "\npip install metagpt", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "感觉属于prompt的一个分类", "label": "N"}
{"outlines": "(赠课) 软件开发基础概念与环境搭建\n课程主要是面向 0 基础的学员\n1. Python 环境搭建\n2. OpenAI API 基础\n3. 运行课件代码\n4.常见问题解答 && 现场 Q&A\n5. 程序员排查BUG指南", "user_input": "听到。", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "token可以想象成标量么", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "同态加密搞试试", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "stable diffuison目前用的已经比较多的，也接近真正落地了", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "会综合一下代码和reviewer结合一下", "label": "N"}
{"outlines": "Fine-tuning é›†ä¸­ç­”ç–‘\n往期课程的大纲如下，基于这些内容，本次课程为答疑课\n注意，对于纯数字输入不做处理\n\n✅ 小实验1：动手微调一个小GPT\n✅ 什么是模型\n✅ 什么是模型训练\n✅ 求解器 & 损失函数简介\n✅ 小实验2：手写一个简单的神经网络并训练它\n✅ 什么训练/预训练/微调/轻量化微调\n✅ Transformer结构简介\n✅ 轻量化微调\n✅ 实验数据集的构建\n✅ 实战 1：基于 Prefix-Tuning 微调 ChatGLM3-6B\n✅ 实战 2：基于 LoRA 微调 ChatGLM3-6B\n✅ 实战 3：基于 QLoRA 微调 Llama2-7B\n✅ 更多训练数据的构建技巧", "user_input": "放在进程池", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "做成流水线，自己取餐。最后结账", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "基本原理能听懂，做起来肯定不会", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "边写边测？一起写的话", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "X射线", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "这节课的起点有些高，背景的基本知识还不太清楚，解决了什么问题也不是很了解", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "我全都要", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "大模型无处不在", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "RAG", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "在摸鱼", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "playground在哪里可以试用", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "大模型不能用来裁员，不然未来我们应该可能就会进入这个", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "wolfram Alpha", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "滑动窗口的意思吗，这里", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "这个不错", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "讲了autogpt以后得", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "大脑疯狂运转中", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "这种问题，让我来，我也解决不了", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "谢谢老师", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "gpt-3.5-turbo-1106，1106是发布日期吗？", "label": "Y"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "我不rerank，让大模型自己去选择能行吗", "label": "Y"}
{"outlines": "多模态大模型（下）\n1. 开源多模态大语言模型\n2. 开源 LLaVA 图文对话系统的训练\n  1. 数据准备\n  2. 训练过程\n  3. 模型部署\n  4. 效果评测\n3. Beyond VL：支持更多模态输入的大语言模型\n  1. X-LLM\n  2. NExT-GPT\n4. 多模态大语言模型的应用\n  1. 多模态 Agents\n  2. LLaVA-Plus\n  3. MM-ReAct", "user_input": "没有听到背景音\\\n啊", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "问题跟本课有没有关是不是通过向量检索来确\\\n定的？", "label": "Y"}
{"outlines": "多模态大模型（下）\n1. 开源多模态大语言模型\n2. 开源 LLaVA 图文对话系统的训练\n  1. 数据准备\n  2. 训练过程\n  3. 模型部署\n  4. 效果评测\n3. Beyond VL：支持更多模态输入的大语言模型\n  1. X-LLM\n  2. NExT-GPT\n4. 多模态大语言模型的应用\n  1. 多模态 Agents\n  2. LLaVA-Plus\n  3. MM-ReAct", "user_input": "可以听到", "label": "N"}
{"outlines": "AI 产品部署和交付\n主题：AI 产品部署和交付\n\n✅1. 硬件选型\n✅2. 大模型的私有化部署\n✅3. 案例：如何优雅地在阿里云私有部署开源大模型\n✅4. 内容安全\n✅5. 互联网信息服务算法", "user_input": "good night", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "把所有agent的所有功能汇集到一个agent上是否可以呢，也就是说什么情景下更合适使用多智能体呢？", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "感谢老师~", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "表格，图片肯定\\\n得专门处理", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "谢谢老师👍！！", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "店员\\\n分工合作，", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "多模态有哪些好的研究方向？", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "能本地使用就很强了", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "做多份出来，摆着", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "这个多agent的协同控制肯定不能指望完全智能呀，人类的编排做的不好也很容易变agent智障（单点成功，协同失败", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "自监督学习(SSL)Self-Supervised Learning-", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "有一说一，讲得有些乱", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "能现场做一个action", "label": "N"}
{"outlines": "(赠课) 软件开发基础概念与环境搭建\n课程主要是面向 0 基础的学员\n1. Python 环境搭建\n2. OpenAI API 基础\n3. 运行课件代码\n4.常见问题解答 && 现场 Q&A\n5. 程序员排查BUG指南", "user_input": "怎么获取邀请？", "label": "Y"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "还是自己管理会话可控性强点，也省钱", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "增加并发", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "指标指数级指的是什么", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "移动支付，扫码预定", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "老师，我想用开源模型封装一个api接口调用服务，fastapi,fastchat这两个框架，应用端用spring cloud来实现，还有更好点的\\\n技术方案吗？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "可以让ai自动匹配或生自创function，自循环", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "提前预约点餐", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "空子被补上了", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "老师这个观点不错，一起努力", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "什么是Agent", "label": "Y"}
{"outlines": "多模态大模型（下）\n1. 开源多模态大语言模型\n2. 开源 LLaVA 图文对话系统的训练\n  1. 数据准备\n  2. 训练过程\n  3. 模型部署\n  4. 效果评测\n3. Beyond VL：支持更多模态输入的大语言模型\n  1. X-LLM\n  2. NExT-GPT\n4. 多模态大语言模型的应用\n  1. 多模态 Agents\n  2. LLaVA-Plus\n  3. MM-ReAct", "user_input": "都可以看的很清楚", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "OpenAI的embedding，能够使用在其它的大模型吗？", "label": "Y"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "gpt-3.5不能创建assistant吗？", "label": "Y"}
{"outlines": "多模态大模型（下）\n1. 开源多模态大语言模型\n2. 开源 LLaVA 图文对话系统的训练\n  1. 数据准备\n  2. 训练过程\n  3. 模型部署\n  4. 效果评测\n3. Beyond VL：支持更多模态输入的大语言模型\n  1. X-LLM\n  2. NExT-GPT\n4. 多模态大语言模型的应用\n  1. 多模态 Agents\n  2. LLaVA-Plus\n  3. MM-ReAct", "user_input": "ikun", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "我怎么老有点卡", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "看不到", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "感觉在硬件", "label": "N"}
{"outlines": "Fine-tuning é›†ä¸­ç­”ç–‘\n往期课程的大纲如下，基于这些内容，本次课程为答疑课\n注意，对于纯数字输入不做处理\n\n✅ 小实验1：动手微调一个小GPT\n✅ 什么是模型\n✅ 什么是模型训练\n✅ 求解器 & 损失函数简介\n✅ 小实验2：手写一个简单的神经网络并训练它\n✅ 什么训练/预训练/微调/轻量化微调\n✅ Transformer结构简介\n✅ 轻量化微调\n✅ 实验数据集的构建\n✅ 实战 1：基于 Prefix-Tuning 微调 ChatGLM3-6B\n✅ 实战 2：基于 LoRA 微调 ChatGLM3-6B\n✅ 实战 3：基于 QLoRA 微调 Llama2-7B\n✅ 更多训练数据的构建技巧", "user_input": "“checkpoint”就是游戏里面的那个“存档点”（Doge\\\n）", "label": "N"}
{"outlines": "多模态大模型（下）\n1. 开源多模态大语言模型\n2. 开源 LLaVA 图文对话系统的训练\n  1. 数据准备\n  2. 训练过程\n  3. 模型部署\n  4. 效果评测\n3. Beyond VL：支持更多模态输入的大语言模型\n  1. X-LLM\n  2. NExT-GPT\n4. 多模态大语言模型的应用\n  1. 多模态 Agents\n  2. LLaVA-Plus\n  3. MM-ReAct", "user_input": "这个就是数据标注吗？", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "感觉\\\n这个设计思想很棒啊", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "6b感觉咋样？傻吗", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "大模型这么多，主要的llm swot如何？要效果好，模型+数据集，以及超参数、训练，应该都都重要吧？具体有哪些经验，如何做得更好？", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "eventbus", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "mategpt会以项目工程方式输出结果吗？", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "meta", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "还有，就是这些role都是可以基于不同的模型实现吗？比如coder使用gpt-3.5，reviewer使用gemini", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "产品标准化", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "微信\\\n群里点餐", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "中午该卖快餐", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "多个智能体只能顺序运行吗", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "测试不光只看上一步吧，它还需需要理解用户的输入和需求。", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "垂直领域", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "保证收入", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "提升效率", "label": "N"}
{"outlines": "(赠课) 软件开发基础概念与环境搭建\n课程主要是面向 0 基础的学员\n1. Python 环境搭建\n2. OpenAI API 基础\n3. 运行课件代码\n4.常见问题解答 && 现场 Q&A\n5. 程序员排查BUG指南", "user_input": "搭建 python 环境 做 OPENAI ，用 anacond3 可以吗", "label": "Y"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "检索模型和调用的llm", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "我的google账号也被封号了", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "Demo好强大呀", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "我问GPT智能客服最佳实践，说应当用BERT理解用户意图，再用GPT回答。请问：RAG是否已经实现较好的意图理解，并在咨询场景的智能客服方面可作为一种最佳实践？", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "营业额", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "meatagpt 可以让gpt自己来控制一个gpt 的team..", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "监管太多了，流程太繁琐乱七八糟了", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "老师讲的很好", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "老师好", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "什么时候用Agent什么时候用function calling", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "多模态", "label": "N"}
{"outlines": "(赠课) 软件开发基础概念与环境搭建\n课程主要是面向 0 基础的学员\n1. Python 环境搭建\n2. OpenAI API 基础\n3. 运行课件代码\n4.常见问题解答 && 现场 Q&A\n5. 程序员排查BUG指南", "user_input": "文档在哪里下载？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "物联网IoT", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "好厉害，是在向量数据库中找到类似的句子，然后再发给大模型处理吗？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "怎么能跟老师你一样实现财富自由？", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "Gradio 是一个用于快速创建交互式界面的Python库，这些界面可以用于演示和测试机器学习模型。使用Gradio，开发者可以非常轻松地为他们的模型", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "产品缺陷检测阿里有几个案例。", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "这样是不是相当于耗费更多资源去提升效果", "label": "Y"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "字节跳动不就被封了么", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "针对早餐是OK，但是针对餐厅，真的是不好。至少大家去餐厅的时候，根本不想听到：“扫码点餐。。。”", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "梯子有啥好介绍", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "让got来讲", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "这个智能体把这套认知方法体现出来了", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "自助餐系列早餐", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "可以呀，但是成本又高了", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "假设1000个表", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "有点模糊", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "照葫芦画瓢的天花板", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "感觉function calling没有前途呢", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "我是做UI", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "可以让世界模型有很多小模型组建而成吗", "label": "Y"}
{"outlines": "多模态大模型（上）\n1. 多模态大模型的定义\n  1. 跨模态模型\n  2. 单模态大模型\n  3. 多模态模型\n  4. 多模态语言大模型\n2. 图文多模态模型的发展\n  1. Vision Transformer\n  2. 图像文本联合建模\n  3. 大规模图-文 token 对齐模型（CLIP）\n  4. 多模态大语言模型\n    1. OpenAI GPT-4V\n    2. Google Gemini\n3. GPT-4V 实战", "user_input": "老师辛苦了", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "【问题】\\\n1.function call 和 Assistants 的区别？", "label": "Y"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "assistant api免费吗", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "现在模型参数太多，对算力需求太大，似乎不科学，现在科学界对于降低算力需求的科研 有哪些重大进展？", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "给食物分类", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "扫码就有链接了", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "感觉做测试比较合适", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "Maas感觉价值不大，也就最近1、2年有机会。因为只要底层大模型一更新，它完全可以把你做的整个Mass全包了", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "自然语言 难描述清楚\\\n吧", "label": "N"}
{"outlines": "Fine-tuning é›†ä¸­ç­”ç–‘\n往期课程的大纲如下，基于这些内容，本次课程为答疑课\n注意，对于纯数字输入不做处理\n\n✅ 小实验1：动手微调一个小GPT\n✅ 什么是模型\n✅ 什么是模型训练\n✅ 求解器 & 损失函数简介\n✅ 小实验2：手写一个简单的神经网络并训练它\n✅ 什么训练/预训练/微调/轻量化微调\n✅ Transformer结构简介\n✅ 轻量化微调\n✅ 实验数据集的构建\n✅ 实战 1：基于 Prefix-Tuning 微调 ChatGLM3-6B\n✅ 实战 2：基于 LoRA 微调 ChatGLM3-6B\n✅ 实战 3：基于 QLoRA 微调 Llama2-7B\n✅ 更多训练数据的构建技巧", "user_input": "过拟合？", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "老师哪里人", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "字放大些吧", "label": "N"}
{"outlines": "Fine-tuning é›†ä¸­ç­”ç–‘\n往期课程的大纲如下，基于这些内容，本次课程为答疑课\n注意，对于纯数字输入不做处理\n\n✅ 小实验1：动手微调一个小GPT\n✅ 什么是模型\n✅ 什么是模型训练\n✅ 求解器 & 损失函数简介\n✅ 小实验2：手写一个简单的神经网络并训练它\n✅ 什么训练/预训练/微调/轻量化微调\n✅ Transformer结构简介\n✅ 轻量化微调\n✅ 实验数据集的构建\n✅ 实战 1：基于 Prefix-Tuning 微调 ChatGLM3-6B\n✅ 实战 2：基于 LoRA 微调 ChatGLM3-6B\n✅ 实战 3：基于 QLoRA 微调 Llama2-7B\n✅ 更多训练数据的构建技巧", "user_input": "上节课讲推理大模型显存=参数*4，训练的话再除以0.6，那么chatgml3 6B  推理6*4=24G显存，训练：24/0.6=40G显存？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "2900以下，大A还是很硬的。", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "这个框架挺厉害的，很多地方的设计得很优雅啊", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "57888888888888888888", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "老师辛苦，晚安", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "解决人流高峰时段的取餐等待时间问题", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "大模型的好坏，可以按打标签的准确率来衡量吗？会不会大模型擅长打标签呢？", "label": "Y"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "向量相关性根据什么计算？", "label": "Y"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "算法备案大致就是提交有关他们使用的算法的详细信息，以及这些算法是如何使用的，以及它们对个人数据隐私和安全的潜在影响。", "label": "N"}
{"outlines": "多模态大模型（上）\n1. 多模态大模型的定义\n  1. 跨模态模型\n  2. 单模态大模型\n  3. 多模态模型\n  4. 多模态语言大模型\n2. 图文多模态模型的发展\n  1. Vision Transformer\n  2. 图像文本联合建模\n  3. 大规模图-文 token 对齐模型（CLIP）\n  4. 多模态大语言模型\n    1. OpenAI GPT-4V\n    2. Google Gemini\n3. GPT-4V 实战", "user_input": "谢谢老师", "label": "N"}
{"outlines": "AI 产品部署和交付\n主题：AI 产品部署和交付\n\n✅1. 硬件选型\n✅2. 大模型的私有化部署\n✅3. 案例：如何优雅地在阿里云私有部署开源大模型\n✅4. 内容安全\n✅5. 互联网信息服务算法", "user_input": "老师，作业1 cli_chat.py -m", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "混合检索是什么？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "openai接口几个角色分别是什么定义以及使用的场景？", "label": "Y"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "gpt-3.5不能创建assistant吗？ 可以创建的，有一步选择模型", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "产品没有了怎没办", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "拆解任务", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "助教的信息为什么是“含有未知来源的链接，暂不支持查看此消息”？", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "淘李福：数学问题好像是和Mathmatics合作，是不是也是一种function call?\\\n对", "label": "Y"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "讲课吧。。。。", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "应该让老师多花时间讲课，提问太多，很多问题质量不高，意义不大，建议以讲课为主，老师少回答问题", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "感觉真的是用了变声器", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "老师再见", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "老师辛苦了", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "那怎么避免这种问题呢", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "吹走的肥皂盒，人工去捡？", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "余弦夹角越小值越接近1", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "刚才老师说，gpts实现的RAG的时候有缺陷，请问是那些？", "label": "Y"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "id就是句柄", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "还是我只管听就行了。 ", "label": "N"}
{"outlines": "(赠课) 软件开发基础概念与环境搭建\n课程主要是面向 0 基础的学员\n1. Python 环境搭建\n2. OpenAI API 基础\n3. 运行课件代码\n4.常见问题解答 && 现场 Q&A\n5. 程序员排查BUG指南", "user_input": "可以吧", "label": "N"}
{"outlines": "多模态大模型（上）\n1. 多模态大模型的定义\n  1. 跨模态模型\n  2. 单模态大模型\n  3. 多模态模型\n  4. 多模态语言大模型\n2. 图文多模态模型的发展\n  1. Vision Transformer\n  2. 图像文本联合建模\n  3. 大规模图-文 token 对齐模型（CLIP）\n  4. 多模态大语言模型\n    1. OpenAI GPT-4V\n    2. Google Gemini\n3. GPT-4V 实战", "user_input": "\n有种播音主持的感觉", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "现在bci实现了吗？", "label": "Y"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "embedding,如何处理语音信号的？", "label": "Y"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "是什么关系", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "王老师，晚上\\\n好", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "ModuleNotFoundError: No module named 'metagpt'", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "有课件可\\\n下载吗", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "老师辛苦了", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "cmd 同时点+", "label": "N"}
{"outlines": "AI 产品部署和交付\n主题：AI 产品部署和交付\n\n✅1. 硬件选型\n✅2. 大模型的私有化部署\n✅3. 案例：如何优雅地在阿里云私有部署开源大模型\n✅4. 内容安全\n✅5. 互联网信息服务算法", "user_input": "可以听到", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "sop是服务流程\\\nd", "label": "N"}
{"outlines": "AI 产品部署和交付\n主题：AI 产品部署和交付\n\n✅1. 硬件选型\n✅2. 大模型的私有化部署\n✅3. 案例：如何优雅地在阿里云私有部署开源大模型\n✅4. 内容安全\n✅5. 互联网信息服务算法", "user_input": "谢谢老师", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "买午餐、晚餐", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "就这仨瓜俩枣的销量还费这进干嘛，老板估计不会想这么多", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "mass是不是象数据库的地位。", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "老师讲的太好了", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "所有复杂的问题都可以通过细化和拆分来解决", "label": "N"}
{"outlines": "(赠课) 软件开发基础概念与环境搭建\n课程主要是面向 0 基础的学员\n1. Python 环境搭建\n2. OpenAI API 基础\n3. 运行课件代码\n4.常见问题解答 && 现场 Q&A\n5. 程序员排查BUG指南", "user_input": "文档在哪里下载？", "label": "Y"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "请问 现阶段 assistant实际价值有多大？国内to b不能用，使用费用还高", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "大模型可以识别出图片中的文字吗", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "https://github.com/geekan/MetaGPT", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "崇祯是汉朝第几任皇帝，他爹是谁", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "能解释下递归吗", "label": "Y"}
{"outlines": "多模态大模型（下）\n1. 开源多模态大语言模型\n2. 开源 LLaVA 图文对话系统的训练\n  1. 数据准备\n  2. 训练过程\n  3. 模型部署\n  4. 效果评测\n3. Beyond VL：支持更多模态输入的大语言模型\n  1. X-LLM\n  2. NExT-GPT\n4. 多模态大语言模型的应用\n  1. 多模态 Agents\n  2. LLaVA-Plus\n  3. MM-ReAct", "user_input": "各类benchmark上的综合测试的那张图,能否稍微解释一下,以便我选择具体的指标.", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "actions调用要满足服务端接\\\n口规范", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "1、Self.Watch() ，里面实现的逻辑是什么？prompt吗？\\\n2、agent的reACT模式，非常消耗token，每步都需要think，有优化方案吗？", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "github 链接可以发一下吗？", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "好像刚才看到版本号是0.4？", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "metaGPT\\\n的SOP，为什么没有一个标准的SOR（需求规格书）？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "中国特色", "label": "N"}
{"outlines": "AI 产品部署和交付\n主题：AI 产品部署和交付\n\n✅1. 硬件选型\n✅2. 大模型的私有化部署\n✅3. 案例：如何优雅地在阿里云私有部署开源大模型\n✅4. 内容安全\n✅5. 互联网信息服务算法", "user_input": "A100伤不起", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "类似小模型扮演专业角色好，还是大模型生成多智能体好？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "老师举例的这个功能，对于普通用户而言，核心价值还是高德的api吧。", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "没梯子", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "这个界面我看不懂研究半天", "label": "N"}
{"outlines": "多模态大模型（上）\n1. 多模态大模型的定义\n  1. 跨模态模型\n  2. 单模态大模型\n  3. 多模态模型\n  4. 多模态语言大模型\n2. 图文多模态模型的发展\n  1. Vision Transformer\n  2. 图像文本联合建模\n  3. 大规模图-文 token 对齐模型（CLIP）\n  4. 多模态大语言模型\n    1. OpenAI GPT-4V\n    2. Google Gemini\n3. GPT-4V 实战", "user_input": "AGI什么时候能实现呢", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "大模型公司完全可以一次性搞定，全世界人都能用", "label": "N"}
{"outlines": "多模态大模型（上）\n1. 多模态大模型的定义\n  1. 跨模态模型\n  2. 单模态大模型\n  3. 多模态模型\n  4. 多模态语言大模型\n2. 图文多模态模型的发展\n  1. Vision Transformer\n  2. 图像文本联合建模\n  3. 大规模图-文 token 对齐模型（CLIP）\n  4. 多模态大语言模型\n    1. OpenAI GPT-4V\n    2. Google Gemini\n3. GPT-4V 实战", "user_input": "每个样本之间的独有属性和共有属性嘛", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "知识库是不是和example一个样？", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "老师，谷歌最近发布了大模型，您怎么看？", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "这就是一套系统化的Agent", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "国内大厂文档\\\n都不太行", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "这个Functioi calling 是调用的Python API吗？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "底层代码决定的吧", "label": "N"}
{"outlines": "多模态大模型（上）\n1. 多模态大模型的定义\n  1. 跨模态模型\n  2. 单模态大模型\n  3. 多模态模型\n  4. 多模态语言大模型\n2. 图文多模态模型的发展\n  1. Vision Transformer\n  2. 图像文本联合建模\n  3. 大规模图-文 token 对齐模型（CLIP）\n  4. 多模态大语言模型\n    1. OpenAI GPT-4V\n    2. Google Gemini\n3. GPT-4V 实战", "user_input": "能听懂", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "886", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "老师好", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "数据查询函数需要自己实现", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "老师，程序员的出路在哪儿？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "Wolfram是符号逻辑", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "根据代码进行优化", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "编程助手能用于分析单片机汇编指令的功能么？", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "用手机点单，打散收银台的\\\n高并发", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "老师辛苦了", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "sum故意写错，gpt会返回错的吗？", "label": "Y"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "如果有一个 三方开源库，怎样让 copilot 读取库代码， 并生成 配合\\\n调用库的 代码呢？", "label": "Y"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "用句号去切分是不是好点？", "label": "Y"}
{"outlines": "Fine-tuning é›†ä¸­ç­”ç–‘\n往期课程的大纲如下，基于这些内容，本次课程为答疑课\n注意，对于纯数字输入不做处理\n\n✅ 小实验1：动手微调一个小GPT\n✅ 什么是模型\n✅ 什么是模型训练\n✅ 求解器 & 损失函数简介\n✅ 小实验2：手写一个简单的神经网络并训练它\n✅ 什么训练/预训练/微调/轻量化微调\n✅ Transformer结构简介\n✅ 轻量化微调\n✅ 实验数据集的构建\n✅ 实战 1：基于 Prefix-Tuning 微调 ChatGLM3-6B\n✅ 实战 2：基于 LoRA 微调 ChatGLM3-6B\n✅ 实战 3：基于 QLoRA 微调 Llama2-7B\n✅ 更多训练数据的构建技巧", "user_input": "谢谢老师，辛苦了~~", "label": "N"}
{"outlines": "AI技术实战精粹: 行业应用与实战演练\n让AI读懂自然语言，实现 sql 业务编写\nLangchain 实现 Chat PDF\n基于RAG技术的知识库\n利用AI理解视频，同时制作视频的旁白人声\n部署一个 stable diffusion\n在本地笔记本部署一个开源大模型", "user_input": "更大了", "label": "N"}
{"outlines": "AI技术实战精粹: 行业应用与实战演练\n让AI读懂自然语言，实现 sql 业务编写\nLangchain 实现 Chat PDF\n基于RAG技术的知识库\n利用AI理解视频，同时制作视频的旁白人声\n部署一个 stable diffusion\n在本地笔记本部署一个开源大模型", "user_input": "请问代码在哪下？", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "先run,\\\n要不然听不下去。", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "\n为什么不让使用Github copilot这样的AI？", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "使用钟点工", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "这种action和和function calling有什么区别", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "安全性不行吧", "label": "N"}
{"outlines": "AI 产品部署和交付\n主题：AI 产品部署和交付\n\n✅1. 硬件选型\n✅2. 大模型的私有化部署\n✅3. 案例：如何优雅地在阿里云私有部署开源大模型\n✅4. 内容安全\n✅5. 互联网信息服务算法", "user_input": "可以啊", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "出4.5TURBO", "label": "N"}
{"outlines": "多模态大模型（下）\n1. 开源多模态大语言模型\n2. 开源 LLaVA 图文对话系统的训练\n  1. 数据准备\n  2. 训练过程\n  3. 模型部署\n  4. 效果评测\n3. Beyond VL：支持更多模态输入的大语言模型\n  1. X-LLM\n  2. NExT-GPT\n4. 多模态大语言模型的应用\n  1. 多模态 Agents\n  2. LLaVA-Plus\n  3. MM-ReAct", "user_input": "每个阶段对应的训练接也不同", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "智能体中对LLM选型有要求吗，只能是gpt吗、国产有推荐的LLM吗、", "label": "Y"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "这是个数学问题", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "王老师讲得不错，辛苦了byebye", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "中药材名称之间的向量相似度也适合？", "label": "Y"}
{"outlines": "多模态大模型（上）\n1. 多模态大模型的定义\n  1. 跨模态模型\n  2. 单模态大模型\n  3. 多模态模型\n  4. 多模态语言大模型\n2. 图文多模态模型的发展\n  1. Vision Transformer\n  2. 图像文本联合建模\n  3. 大规模图-文 token 对齐模型（CLIP）\n  4. 多模态大语言模型\n    1. OpenAI GPT-4V\n    2. Google Gemini\n3. GPT-4V 实战", "user_input": "gpt4v能结合RAG使用吗？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "pc能看", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "是我觉得挺好的", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "已满200人进不去啦", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "这个可以参考pmp", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "刚看到  维基百科发布的大模型，可以解决幻觉问题", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "王老师，今天很帅！", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "GPTs用过", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "律师写文书吗", "label": "N"}
{"outlines": "AI技术实战精粹: 行业应用与实战演练\n让AI读懂自然语言，实现 sql 业务编写\nLangchain 实现 Chat PDF\n基于RAG技术的知识库\n利用AI理解视频，同时制作视频的旁白人声\n部署一个 stable diffusion\n在本地笔记本部署一个开源大模型", "user_input": "AI造数据？具体讲讲呢", "label": "Y"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "大语言过2年会不会被替代？", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "文本向量，向量模型，向量数据库", "label": "N"}
{"outlines": "从AI编程认知AI\n1. 做个天天用 AI 的人\n2. 编程能力是大模型天花板\n3. GitHub Copilot\n  1). 商业成功\n  2). 补全代码的技巧和原理\n  3). Copilot Chat\n  4). 命令行 Copilot\n  5). Copilot 原理\n4. Copilot 的平替们\n  1). 国产开源 CodeGeeX\n  2). 可本机部署的 Tabby\n  3). Bito、Amazon CodeWhisperer、Cursor、Tabine\n  4). 更多开源编程大模型\n    a. Code Llama\n    b. 姜子牙 Ziya-Coding-15B-v1\n    c. CodeFuse-CodeLlama-34B\n    e. WizardCoder\n  5). GItHub Copilot chat\n5. 编程 Agents\n  1). GPT Engineer\n  2). GPT Web App Generator\n  3). MetaGPT\n6. AI 能力定律和提效定律", "user_input": "能听到", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "其他llm", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "买个大笼屉", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "然而没有人喜欢提前在公众号下单麦当劳肯德基，服务人员站在服务台，不提供服务就是很令人讨厌的。", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "null和“”不就是自然语言定义的吗", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "循环了", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "因为cosine0=1", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "不知道", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "解决AI决策类的问题，多个大模型的决策，可以用llm解决么？", "label": "Y"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "原文也存在向量数据库中么？", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "数学家：ChatGpt的数学能力很差", "label": "N"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "没有什么问题是套一层解决不掉的，如果不行，那就在套一层的思路", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "好像原生API", "label": "N"}
{"outlines": "RAG和Embeddings\n1. 为什么要做RAG\n2. 搭建一个简单的ChatPDF\n3. 检索的基础概念\n4. 什么是向量表示（Embeddings）\n5. 向量数据库与向量检索\n6. 基于向量检索的RAG\n7. 搭建RAG系统的扩展知识\n8. 向量模型本地部署", "user_input": "如果有RAG功能，不管什么问题，都要先检索数据库，如果问的问题和上传的PDF都不相关，那也要检索一遍吗，这样不是会导致性能变差", "label": "Y"}
{"outlines": "Function Calling\n1. 看 AI 巨变带来的 UI、API 终极演变\n✅2. NLI 塑造未来软件世界\n✅3. 大模型连接真实世界的方法\n   1. 用 GPTs  Actions 对接高德地图\n   2. 原理解析\n   3. GPTs 的平替：Coze、Dify\n✅4. 用 Function Calling 做更灵活的对接\n   1. 机制原理\n   2. 调用本地函数\n   3. 多 Function 轮流调用和同时调用\n   4. 用 Function Calling 构造 JSON\n   5. 从自然语言生成 SQL 语句\n   6. 流式调用\n✅5. Function Calling 注意事项\n✅6. 支持 Function Callling 的国产大模型\n✅7. Function Calling 带来的产品想象空间", "user_input": "xml", "label": "N"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "metagpt 能用千问api跑么", "label": "Y"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "老师如果出了那个新的模态会提醒已报课的同学们吗", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "画面能放大到全屏吗？", "label": "N"}
{"outlines": "Assistants API\n✅1. OpenAI 给了我们更大空间\n✅2. 原生 API、GPTs、Assistants API、国产/开源大模型选型参考\n✅3. Assistants API 的主要能力\n✅4. 做一个自己的 GPT\n  1. 创建 assistant\n  2. 管理 thread\n  3. 添加 message\n  4. 开始 run\n  5. 中控调度\n  6. Function Calling\n  7. Code Interpreter\n  8. RAG", "user_input": "assistant 这个使用是不是也要花钱？刚刚试用了一下，直接就被告知【超出了配额】。我们的课可以帮我们充值体验吗？", "label": "Y"}
{"outlines": "MetaGPT\n1.MetaGPT简介\n2MetaGPT框架整体机制介绍\n3.构建你的第一个智能体\na、单动作智能体\n b、多动作智能体\n c、思考和动作选择机制\n4.构建你的第一个多智能体\na、团队SOP构建\n b、多智能体交互机制\n5.引入人类交互", "user_input": "AI进化的速度，远超想象.", "label": "N"}
{"outlines": "【神秘嘉宾】大模型时代的AI产品新挑战\n1. AI 能力演进路线\n✅2. LLMs 带来的变化\n✅3. 如何将大模型落地到实际场景中\n✅4. LLMs 存在哪些问题\n✅5. LLMs 落地三要素\n✅6. LLMs 短期、中期和长期落地方向", "user_input": "ai应用是如何测试和评估的？如果受概率影响，是否有一套不同\\\n的测试流程？", "label": "Y"}
